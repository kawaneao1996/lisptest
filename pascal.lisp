(defun comb (n i)
  (labels ((fact (n)
	     (let ((rslt 1))
	       (dotimes (k n rslt)
		 (setq rslt (* rslt (- n k)))))))
    (/ (fact n) (* (fact i) (fact (- n i))))))
;;配列の代入にはsetf ≠ se:変数,setq:シンボル
(defun make-pascal (n)
  (let ((rslt (make-array n :initial-element 0)))
    (dotimes (i n rslt)
      (setf (aref rslt i) (comb (1- n) i)))))

;;表示
(defun pascal (n)
  (do ((i 1 (1+ i)))
      ((> i n) n)
    (print (make-pascal i))
;    (terpri)
    ))
(defun depascal (n)
  (let ((arr (make-pascal n)) (rslt 0))
    (dotimes (j (1- n) )
      (setf (aref arr j) (+ (aref arr j) (aref arr (1+ j))))
      )
    (setf (aref arr (1- n)) 0)
    (setq rslt (aref arr 0))
    (princ (make-pascal n))
    (terpri)
    (princ arr)
))

(defun re-depascal (n arr)
  (let ( (rslt 0))
    (dotimes (j (1- n) arr)
      (setf (aref arr j) (+ (aref arr j) (aref arr (1+ j))))
      )
    (setf (aref arr (1- n)) 0)
    (setq rslt (aref arr 0))
;;    (princ (make-pascal n))
  ;;  (terpri)
    ;;    (princ arr)
    arr
))
(defun depascal-cal (n)
  (let ((arr (make-pascal n)) (rslt 0))
;;    (print (make-pascal n))
;;    (terpri)
    (dotimes (i (1- n) )
      (setf arr (re-depascal n arr))
      (setf (aref arr (- n 1 i) )0)
      (print arr)
;      (terpri)
      )
    (setq rslt (aref arr 0))
    )
  )
(defun ex-pascal (n)
  (pascal n)
  (depascal-cal n))


  
